from tensorflow.keras.preprocessing.text import Tokenizer
from keras.preprocessing import sequence
from keras.models import Sequential, load_model
import pickle
import numpy as np

#loading model

network = load_model("orbitar_base.h5")
strin = ["""я тоже в кировске был. долгопост. работал я работал и был там один геофизик по имени baka (дурак по японски). хороший был человек небесный практически. я как-то к нему тянулся из-за его неординарности, он мог спать на рабочем месте и т.д., типа не трогайте всё будет, только не трогайте. мы поехали в кировск, у него своя доска, но штанишки городские, у меня доски нет и штанишки тоже городские. арендовал я доску, спросил у местных а что с ней делать? мне сказали иди на детскую горку и там катайся, я ок. пошел туда, смотрю как инструктор малышню тренируют перводневок и повторяю, так прошел час, ну думаю ок, уже кое что, подходит бака, поехали говрит на верх, я ок а чего там? ну поедем потом вниз чего не понятно. я такой ок, ну а что, зря приехали, надо за эти деньги все брать. вот стою я на самой вершине кукисвумчор, впереды сложный выход, скалы и узенький проход, я думаю а что делать то? как это предодолеть? пока думал нащупал сникерс в кармане, достал почистил, ем с мыслями, скорее всего последний в жизни. доел, пустился во все тяжкие, спустился по скалам (даже не упав!) и вышел на трассу. там десятки падений, лыжники проносятся привет кибальчишу (в смысле помощь нужна нет?), в общем стоню раз пизданулся но до низа как-то добрался, в верх уже сил не было, вообще сил не было. Потом мы пошли ночевать в общагу горного, что-то спиздели вахтерше, спальных мест не хватило, поэтому мне достался комп и все эпопея звездных войн, по проядочку. Утром на поезд и домой. Живы целы, сноуборд мишшон комплитет. Надо сказать таки там я научился, потом на корпоративе катались, я там уже более увернно себя чувствовал, но не хватало физухи, она важна.
"""]

#loading tokenizer
with open('tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

seq = tokenizer.texts_to_sequences(strin)
x_seq = sequence.pad_sequences(seq, maxlen=400)

prediction = network.predict(np.array(x_seq), verbose=1)
print(prediction)